##
# This is the content part of our blogfeed.
# It's used for the xml and the normal html output, just uses different templates for the two cases.
#
prototype(Shel.Blog:BlogFeedContent) < prototype(Content) {
    templatePath = ${'resource://Shel.Blog/Private/Templates/Content/BlogFeed.' + request.format}
    attributes.class = 'blog-feed'
    sectionName = 'feed'
    configuration = ${Configuration.setting('Shel.Blog')}

    title = ${node.properties.title}
    description = ${node.properties.description}
    sortingDirection = ${node.properties.sortingDirection}

    # Make some properties of the node directly accessible in the template to allow inline editing and reduce code.
    sourceNode = ${q(node).property('sourceNode') != null ? q(node).property('sourceNode') : node}
    @context.sourceNode = ${this.sourceNode}
    requestArguments = ${request.pluginArguments}

    # Fetch feed entries
    feedEntries = ${this.sourceNode != null ? q(this.sourceNode).find('[instanceof Shel.Blog:BlogEntry]').get() : []}
    feedEntries.@process {
        sort = ${value ? q(value).sortBlogEntries('publicationDate', this.sortingDirection == 'descending' ? 'DESC' : 'ASC').get() : value}
        slice = ${this.limit ? Array.slice(value, 0, this.limit) : value}
    }
    @context.feedEntries = ${this.feedEntries}
    feedContent = TYPO3.TypoScript:Collection {
        collection = ${feedEntries}
        itemName = 'node'
        itemRenderer = Shel.Blog:BlogFeedEntry
    }

    # Setup source node to retrieve blog posts from
    lastUpdatedNode = ${this.sortingDirection == 'descending' ? Array.first(feedEntries) : Array.last(feedEntries)}

    # Can be used to add attributes to the list containing the entries in the feed
    listAttributes = TYPO3.TypoScript:Attributes

    @cache {
        mode = 'cached'
        entryIdentifier {
            format = ${request.format}
            paginationArgument = ${request.pluginArguments['blog-pagination'].currentPage}
            node = ${node}
            editPreviewMode = ${node.context.currentRenderingMode.name}
        }
        // Flush the blog feed when a blog entry is changed
        entryTags {
            1 = ${'Node_' + node.identifier}
            2 = ${'Node_' + sourceNode.identifier}
            3 = ${'DescendantOf_' + sourceNode.identifier}
        }
    }
}

prototype(TYPO3.Neos:Page).@cache.entryIdentifier.paginationArgument = ${request.pluginArguments['blog-pagination'].currentPage}
root.@cache.entryIdentifier.paginationArgument = ${request.pluginArguments['blog-pagination'].currentPage}
