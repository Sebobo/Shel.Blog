##
# "BlogFeed" layout
# We clear the prototype of the BlogFeed so we don't have inherited
# properties we don't want and would be contained in the output.
#
prototype(SebastianHelzle.Blog:BlogFeed) >
prototype(SebastianHelzle.Blog:BlogFeed) < prototype(TypoScript:Array) {
	doctype = '<?xml version="1.0" encoding="utf-8"?>'
	doctype.@position = 'start 100'

	feed = TypoScript:Template
	feed {
		@position = 'after doctype'
		templatePath = 'resource://SebastianHelzle.Blog/Private/Templates/Page/AtomFeed.html'
		sectionName = 'feed'

		node = ${node}
		sourceNode = ${q(node).property('sourceNode')}
		lastUpdatedNode = ${q(this.sourceNode).children('[instanceof SebastianHelzle.Blog:BlogEntry]').first().get(0)}
		requestFormat =  ${request.format}

		@cache {
			mode = 'cached'
			entryIdentifier {
				documentNode = ${documentNode}
			}
			entryTags {
				// Flush the blog feed when a blog entry is changed
				1 = 'NodeType_SebastianHelzle.Blog:BlogEntry'
			}
		}

		entries = TypoScript:Collection {
			sourceNode = ${q(node).property('sourceNode')}
			collection = ${q(this.sourceNode).children('[instanceof SebastianHelzle.Blog:BlogEntry]')}

			itemName = 'node'
			itemRenderer = TypoScript:Template {
				templatePath = 'resource://SebastianHelzle.Blog/Private/Templates/TypoScriptObjects/AtomFeedEntry.html'
				node = ${node}

				entryContent = Neos:ContentCollection {
					nodePath = 'main'
				}
			}
		}
	}
}

# Calling a page with the format .atom will automatically call this layout
atom = SebastianHelzle.Blog:BlogFeed
