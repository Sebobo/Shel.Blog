##
# This is the content part of our blogfeed.
# It's used for the xml and the normal html output, just uses different templates for the two cases.
#
prototype(SebastianHelzle.Blog:BlogFeedContent) < prototype(Neos:Content) {
	node = ${node}

	# Make some properties of the node directly accessible in the template to allow inline editing and reduce code.
	title = ${node.properties.title}
	description = ${node.properties.description}
	authorName = ${node.properties.authorName}
	limit = ${node.properties.limit}
	sourceNode = ${node.properties.sourceNode ? node.properties.sourceNode : site}
	allEntries = ${q(this.sourceNode).find('[instanceof SebastianHelzle.Blog:BlogEntry]')}

	# override makes the enclosed properties also available to the entry renderer
	@override {
		requestFormat =  ${request.format}
		feedEntries = ${this.allEntries.get()}
		feedEntries.@process.slice = ${Array.slice(value, 0, this.limit)}
	}

	# Setup source node to retrieve blog posts from
	lastUpdatedNode = ${blogEntries.first().get(0)}

	# Select the template depending on the requested format
	templatePath = ${'resource://SebastianHelzle.Blog/Private/Templates/Content/BlogFeed.' + requestFormat}
	attributes.class = 'blog-feed'
	sectionName = 'feed'

	@cache {
		mode = 'cached'
		entryIdentifier.documentNode = ${documentNode}
		// Flush the blog feed when a blog entry is changed
		entryTags.1 = 'NodeType_SebastianHelzle.Blog:BlogEntry'
	}

	entries = TypoScript:Collection {
		collection = ${feedEntries}

		itemName = 'node'
		itemRenderer = SebastianHelzle.Blog:BlogEntry {
			templatePath = ${'resource://SebastianHelzle.Blog/Private/Templates/TypoScriptObjects/BlogFeedEntry.' + requestFormat}
		}
	}
}

##
# "BlogFeed" layout
# We clear the prototype of the BlogFeed so we don't have inherited
# properties we don't want and would be contained in the output.
#
prototype(SebastianHelzle.Blog:BlogFeed) >
prototype(SebastianHelzle.Blog:BlogFeed) < prototype(TypoScript:Array) {
	doctype = '<?xml version="1.0" encoding="utf-8"?>'
	doctype.@position = 'start 100'

	feed = SebastianHelzle.Blog:BlogFeedContent {
		@position = 'after doctype'
	}
}

##
# Html version of the blog feed
# It's just for rendering the primary content part and not the whole page.
# This way it will integrate easily into an existing layout.
#
prototype(SebastianHelzle.Blog:BlogFeedHtml) < prototype(SebastianHelzle.Blog:BlogFeedContent)

##
# Add a condition to render the primary content differently if we show a blog feed
#
prototype(Neos:PrimaryContent).BlogFeed {
	condition = ${q(node).is('[instanceof SebastianHelzle.Blog:BlogFeed]')}
	type = 'SebastianHelzle.Blog:BlogFeedHtml'
}

##
# Calling a page with the format .atom will automatically call the xml based layout
#
atom = SebastianHelzle.Blog:BlogFeed
