##
# "BlogFeed" layout
# We clear the prototype of the BlogFeed so we don't have inherited
# properties we don't want and would be contained in the output.
#
prototype(Shel.Blog:BlogFeed) >
prototype(Shel.Blog:BlogFeed) < prototype(Neos.Fusion:Http.Message) {
    httpResponseHead {
        headers.Content-Type = 'application/xml'
    }

    doctype = '<?xml version="1.0" encoding="utf-8"?>'
    doctype.@position = 'start 100'

    feed = Shel.Blog:BlogFeedContent {
        @position = 'after doctype'
        limit = 0
    }

    // Provide a custom partial when the atom format is called because Fluid will try to find a Image.atom partial
    prototype(Neos.NodeTypes:Image) {
        partialRootPath = 'resource://Shel.Blog/Private/Templates/NodeTypes/Partials'
    }

    prototype(Neos.NodeTypes:TextWithImage) {
        partialRootPath = 'resource://Shel.Blog/Private/Templates/NodeTypes/Partials'
    }

    prototype(Shel.Blog:BlogFeedEntry) {
        // We need the raw thumbnail for the feed to access the file size of the processed image and other details
        atomImage = ${this.entryImage != null ? Shel.Blog.Asset.createThumbnail(this.entryImage, null, this.settings.atomImageMaxWidth) : null}

        // Flow creates most links with the requests current format, which wouldn't be correct for the entry content
        content.@process.convertAtomUris = ${String.pregReplace(value, '/(<a.*?href=[^>]*)(\.atom)(.*?>)/mi', '$1.html$3')}
    }

    // We only want absolute uris in the atom feed
    prototype(Neos.Neos:ConvertUris) {
        absolute = true
    }
}

##
# Html version of the blog feed
# It's just for rendering the primary content part and not the whole page.
# This way it will integrate easily into an existing layout.
#
prototype(Shel.Blog:BlogFeedHtml) < prototype(Shel.Blog:BlogFeedContent)

##
# Add a condition to render the primary content differently if we show a blog feed
#
prototype(PrimaryContent).BlogFeed {
    condition = ${q(node).is('[instanceof Shel.Blog:BlogFeed]')}
    type = 'Shel.Blog:BlogFeedHtml'
}

##
# Calling a page with the format .atom will automatically call the xml based layout
#
atom = Shel.Blog:BlogFeed
