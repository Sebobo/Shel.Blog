prototype(Shel.Blog:Component.MicroData) < prototype(Neos.Fusion:Tag) {
    tagName = 'script'
    attributes.type = 'application/ld+json'

    @context {
        publisherLogoWidth = 600
        publisherLogoHeight = 60
        imageWidth = 2000
        imageHeight = 800
    }

    content = Neos.Fusion:RawArray {
        '@context' = 'http://schema.org'
        '@type' = 'NewsArticle'
        headline = ${q(documentNode).property('title')}
        datePublished = ${Date.format(q(documentNode).property('publicationDate'), 'c')}
        dateModified = ${Date.format(q(documentNode).property('_lastModificationDateTime'), 'c')}
        description = ${String.stripTags(q(documentNode).property('entrySummary'))}

        mainEntityOfPage = Neos.Neos:NodeUri {
            node = ${documentNode}
            absolute = true
        }

        author = Neos.Fusion:RawArray {
            '@type' = 'Person'
            name = ${q(documentNode).property('authorName')}
            @if.hasAuthor = ${!String.isBlank(q(documentNode).property('authorName'))}
        }

        publisher = Neos.Fusion:RawArray {
            '@type' = 'Organization'
            name = ${site.context.currentSite.name}

            logo = Neos.Fusion:RawArray {
                '@type' = 'ImageObject'
                width = ${publisherLogoWidth}
                height = ${publisherLogoHeight}
                url = Neos.Neos:ImageUri {
                    asset = ${q(documentNode).property('entryImage')}
                    width = ${publisherLogoWidth}
                    height = ${publisherLogoHeight}
                }
                @if.hasImage = ${q(documentNode).property('entryImage')}
            }
        }

        image = Neos.Fusion:RawArray {
            '@type' = 'ImageObject'
            width = ${imageWidth}
            height = ${imageHeight}
            url = Neos.Neos:ImageUri {
                asset = ${q(documentNode).property('entryImage')}
                width = ${imageWidth}
                height = ${imageHeight}
            }
            @if.hasImage = ${q(documentNode).property('entryImage')}
        }

        @process.toJson = ${Json.stringify(value)}
    }
}
