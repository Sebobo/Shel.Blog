##
# This is the content part of our blogfeed.
# It's used for the xml and the normal html output, just uses different templates for the two cases.
#
prototype(Shel.Blog:Component.Feed) < prototype(Neos.Neos:ContentComponent) {
    configuration = ${Configuration.setting('Shel.Blog')}
    title = ${q(node).property('title')}
    authorName = ${q(node).property('authorName')}
    sortingDirection = ${q(node).property('sortingDirection')}
    limit = ${q(node).property('limit')}
    sourceNode = ${q(node).property('sourceNode') != null ? q(node).property('sourceNode') : node}
    category = null
    paginationConfiguration = Neos.Fusion:DataStructure {
        itemsPerPage = ${q(node).property('itemsPerPage') || 5}
        maximumNumberOfLinks = ${q(node).property('maximumNumberOfLinks') || 10}
    }
    requestArguments = ${request.pluginArguments}
    currentBlogPage = ${String.toInteger(this.requestArguments['blog-pagination'].currentPage || 1)}

    summary = Neos.Neos:ContentCollection {
        nodePath = 'summary'
    }

    description = ${String.htmlSpecialChars(String.stripTags(this.summary))}

    feedEntries = ${this.sourceNode != null ? q(this.sourceNode).find('[instanceof Shel.Blog:Document.Article]').get() : []}
    feedEntries.@process {
        filterByCategory = ${this.category && value ? q(value).filterByReference(this.category, 'categories').get() : value}
        sort = ${value ? q(value).sortBlogEntries('publicationDate', this.sortingDirection == 'descending' ? 'DESC' : 'ASC').get() : value}
        slice = ${this.limit > 0 ? Array.slice(value, 0, this.limit) : value}
    }

    # Create condition if paginated feed should be rendered
    maxNumberOfPages = ${Math.ceil(q(this.feedEntries).count() / this.paginationConfiguration.itemsPerPage)}
    renderFeed = ${Array.length(this.feedEntries) > 0 && this.currentBlogPage > 0 && this.currentBlogPage <= this.maxNumberOfPages}

    # Setup source node to retrieve blog posts from
    lastUpdatedNode = ${this.sortingDirection == 'descending' ? Array.first(this.feedEntries) : Array.last(this.feedEntries)}
    lastUpdated = ${q(this.lastUpdatedNode).property('publicationDate')}
    lastUpdated.@process.fallback = ${value != '' && value != null ? value : q(this.lastUpdatedNode).property('_lastPublicationDateTime')}

    renderer = Neos.Fusion:Template {
        templatePath = ${'resource://Shel.Blog/Private/Templates/Components/Feed.' + request.format}
        attributes = Neos.Fusion:Attributes {
            class = 'blog-feed'
        }
        sectionName = 'feed'

        header = afx`
            <header>
                <h1 @key="headline"><Neos.Neos:Editable property="title"/></h1>
                {props.summary}
            </header>
        `

        node = ${node}
        authorName = ${props.authorName}
        title = ${props.title}
        description = ${props.description}
        lastUpdated = ${props.lastUpdated}
        feedEntries = ${props.feedEntries}
        renderFeed = ${props.renderFeed}
        paginationConfiguration = ${props.paginationConfiguration}

        listAttributes = Neos.Fusion:Attributes {
            class = 'blog-feed__articles'
        }

        noEntriesFound = afx`
            <p class="blog-feed__no-articles">
                {I18n.translate('Shel.Blog:Main:blogEntry.noEntriesFound', 'No articles found')}
            </p>
        `

        feedContent = Neos.Fusion:Collection {
            collection = ${props.feedEntries}
            itemName = 'node'
            itemRenderer = Neos.Fusion:Case {
                atom {
                    condition = ${request.format == 'atom'}
                    type = 'Shel.Blog:Component.AtomTeaser'
                }

                default {
                    condition = true
                    type = 'Shel.Blog:Component.Teaser'
                }
            }
        }
    }

    // Add source node to context for caching
    @context.sourceNode = ${this.sourceNode}

    @cache {
        mode = 'cached'
        entryIdentifier {
            format = ${request.format}
            node = ${node}
            editPreviewMode = ${node.context.currentRenderingMode.name}
        }
        // Flush the blog feed when a blog article has been changed
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.nodeTag(sourceNode)}
            3 = ${Neos.Caching.descendantOfTag(sourceNode)}
        }
    }
}
